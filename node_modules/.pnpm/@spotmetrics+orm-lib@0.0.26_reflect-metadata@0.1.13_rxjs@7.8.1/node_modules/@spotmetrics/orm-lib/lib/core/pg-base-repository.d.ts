import { PoolClient } from "pg";
import { PgDatabaseService } from "./pg-database.service";
import { UpdateData, WhereCondition } from "./typings/database";
export declare abstract class PgBaseRepository<T> {
    protected pg: PgDatabaseService;
    protected abstract tableName(): string;
    constructor(pg: PgDatabaseService);
    protected CRUD: {
        find: (where?: WhereCondition<T>, pool?: PoolClient) => Promise<T[]>;
        findOne: (where: WhereCondition<T>, pool?: PoolClient) => Promise<T | null>;
        create: (data: T, pool?: PoolClient) => Promise<T>;
        update: (data: UpdateData<T>, where: WhereCondition<T>, pool?: PoolClient) => Promise<void>;
        delete: (where: WhereCondition<T>, pool?: PoolClient) => Promise<void>;
        runTransaction: (callback: (client: PoolClient, dbHandlerInstance: typeof PgDatabaseService) => Promise<void>, advisoryLock?: string) => Promise<void>;
    };
}
